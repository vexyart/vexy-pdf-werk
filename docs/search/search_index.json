{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Vexy PDF Werk Documentation","text":"<p>TL;DR: Vexy PDF Werk (VPW) is a Python package and command-line tool to convert PDF documents into high-quality, accessible formats like PDF/A, Markdown, and ePub, with optional AI-powered enhancement.</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Getting Started<ul> <li>Installation</li> <li>Quick Start</li> </ul> </li> <li>User Guide<ul> <li>CLI Usage</li> <li>Configuration</li> <li>Output Formats</li> </ul> </li> <li>API Reference<ul> <li>Core Components</li> <li>Integrations</li> <li>Utilities</li> </ul> </li> <li>Specification<ul> <li>Introduction and Architecture</li> <li>Technology Stack and Configuration</li> <li>... (and so on for all spec files)</li> </ul> </li> <li>Development<ul> <li>Contributing</li> <li>Testing</li> <li>Release Process</li> </ul> </li> </ul>"},{"location":"00-index/","title":"Vexy PDF Werk Documentation","text":"<p>TL;DR: Vexy PDF Werk (VPW) is a Python package and command-line tool to convert PDF documents into high-quality, accessible formats like PDF/A, Markdown, and ePub, with optional AI-powered enhancement.</p>"},{"location":"00-index/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Getting Started<ul> <li>Installation</li> <li>Quick Start</li> </ul> </li> <li>User Guide<ul> <li>CLI Usage</li> <li>Configuration</li> <li>Output Formats</li> </ul> </li> <li>API Reference<ul> <li>Core Components</li> <li>Integrations</li> <li>Utilities</li> </ul> </li> <li>Specification<ul> <li>Introduction and Architecture</li> <li>Technology Stack and Configuration</li> <li>... (and so on for all spec files)</li> </ul> </li> <li>Development<ul> <li>Contributing</li> <li>Testing</li> <li>Release Process</li> </ul> </li> </ul>"},{"location":"01-getting-started/00-installation/","title":"Installation","text":""},{"location":"01-getting-started/00-installation/#from-pypi","title":"From PyPI","text":"<pre><code>pip install vexy-pdf-werk\n</code></pre>"},{"location":"01-getting-started/00-installation/#in-development-mode","title":"In Development Mode","text":"<pre><code>git clone https://github.com/vexyart/vexy-pdf-werk\ncd vexy-pdf-werk\npip install -e .\n</code></pre>"},{"location":"01-getting-started/00-installation/#system-dependencies","title":"System Dependencies","text":"<p>Vexy PDF Werk relies on a few external tools for its core functionality.</p>"},{"location":"01-getting-started/00-installation/#required-dependencies","title":"Required Dependencies","text":"<ul> <li>Python 3.10+</li> <li>tesseract-ocr</li> <li>qpdf</li> <li>ghostscript</li> </ul>"},{"location":"01-getting-started/00-installation/#optional-dependencies","title":"Optional Dependencies","text":"<ul> <li>pandoc (for ePub generation)</li> <li>marker-pdf (for advanced PDF conversion)</li> <li>markitdown (for Microsoft's document converter)</li> <li>docling (for IBM's document understanding)</li> </ul>"},{"location":"01-getting-started/00-installation/#installation-commands","title":"Installation Commands","text":"<p>Ubuntu/Debian:</p> <pre><code>sudo apt-get update\nsudo apt-get install tesseract-ocr tesseract-ocr-eng qpdf ghostscript pandoc\n</code></pre> <p>macOS:</p> <pre><code>brew install tesseract tesseract-lang qpdf ghostscript pandoc\n</code></pre> <p>Windows:</p> <pre><code>choco install tesseract qpdf ghostscript pandoc\n</code></pre>"},{"location":"01-getting-started/01-quick-start/","title":"Quick Start","text":"<p>The fastest way to get started with Vexy PDF Werk is to use the <code>vpw</code> command-line tool.</p>"},{"location":"01-getting-started/01-quick-start/#process-a-pdf","title":"Process a PDF","text":"<p>To process a PDF file with the default settings, simply run:</p> <pre><code>vpw process my_document.pdf\n</code></pre> <p>This will create a directory named <code>output/my_document</code> containing the following files:</p> <ul> <li><code>my_document_enhanced.pdf</code>: A PDF/A version of your document with an OCR text layer.</li> <li>A series of Markdown files, one for each page of your document.</li> <li><code>my_document.epub</code>: An ePub version of your document.</li> <li><code>metadata.yaml</code>: A file containing bibliographic and processing metadata.</li> </ul>"},{"location":"01-getting-started/01-quick-start/#customize-the-output","title":"Customize the Output","text":"<p>You can easily customize the output by providing additional options:</p> <pre><code># Specify a different output directory and only generate Markdown and ePub files\nvpw process my_document.pdf --output_dir ./my_docs --formats \"markdown,epub\"\n</code></pre>"},{"location":"02-user-guide/00-cli-usage/","title":"CLI Usage","text":"<p>The primary way to use Vexy PDF Werk is through its command-line interface, <code>vpw</code>.</p>"},{"location":"02-user-guide/00-cli-usage/#vpw-process","title":"<code>vpw process</code>","text":"<p>Processes a PDF file through the complete VPW pipeline.</p> <p>Usage:</p> <pre><code>vpw process [OPTIONS] &lt;pdf_path&gt;\n</code></pre> <p>Arguments:</p> <ul> <li><code>&lt;pdf_path&gt;</code>: Path to the input PDF file.</li> </ul> <p>Options:</p> <ul> <li><code>--output_dir</code>: Output directory (default: <code>./output/&lt;pdf_name&gt;</code>).</li> <li><code>--formats</code>: Comma-separated list of output formats (default: <code>pdfa,markdown,epub,yaml</code>).</li> <li><code>--verbose</code>: Enable verbose logging.</li> <li><code>--config_file</code>: Path to a custom config file.</li> </ul>"},{"location":"02-user-guide/00-cli-usage/#vpw-config","title":"<code>vpw config</code>","text":"<p>Manages the VPW configuration.</p> <p>Usage:</p> <pre><code>vpw config [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--show</code>: Display the current configuration.</li> <li><code>--init</code>: Initialize a default configuration file.</li> </ul>"},{"location":"02-user-guide/00-cli-usage/#vpw-version","title":"<code>vpw version</code>","text":"<p>Displays the version of Vexy PDF Werk.</p>"},{"location":"02-user-guide/01-configuration/","title":"Configuration","text":"<p>Vexy PDF Werk uses a <code>config.toml</code> file for configuration, which is located in the user's config directory (e.g., <code>~/.config/vexy-pdf-werk/config.toml</code>).</p> <p>You can initialize a default configuration file by running <code>vpw config --init</code>.</p> <p>The configuration is divided into the following sections:</p>"},{"location":"02-user-guide/01-configuration/#processing","title":"<code>[processing]</code>","text":"<ul> <li><code>ocr_language</code>: The language to use for OCR (default: <code>eng</code>).</li> <li><code>pdf_quality</code>: The quality of the output PDF (default: <code>high</code>).</li> <li><code>force_ocr</code>: Whether to force OCR on all pages (default: <code>false</code>).</li> <li><code>deskew</code>: Whether to deskew pages (default: <code>true</code>).</li> <li><code>rotate_pages</code>: Whether to rotate pages (default: <code>true</code>).</li> </ul>"},{"location":"02-user-guide/01-configuration/#conversion","title":"<code>[conversion]</code>","text":"<ul> <li><code>markdown_backend</code>: The backend to use for Markdown conversion (default: <code>auto</code>).</li> <li><code>paginate_markdown</code>: Whether to create a separate Markdown file for each page (default: <code>true</code>).</li> <li><code>include_images</code>: Whether to include images in the Markdown output (default: <code>true</code>).</li> <li><code>extract_tables</code>: Whether to extract tables from the PDF (default: <code>true</code>).</li> </ul>"},{"location":"02-user-guide/01-configuration/#ai","title":"<code>[ai]</code>","text":"<ul> <li><code>enabled</code>: Whether to enable AI features (default: <code>false</code>).</li> <li><code>provider</code>: The AI provider to use (default: <code>claude</code>).</li> <li><code>correction_enabled</code>: Whether to enable AI-powered text correction (default: <code>false</code>).</li> <li><code>enhancement_enabled</code>: Whether to enable AI-powered content enhancement (default: <code>false</code>).</li> <li><code>structure_enhancement_enabled</code>: Whether to enable AI-powered structure enhancement (default: <code>false</code>).</li> <li><code>max_tokens</code>: The maximum number of tokens to use for AI requests (default: <code>4000</code>).</li> </ul>"},{"location":"02-user-guide/01-configuration/#output","title":"<code>[output]</code>","text":"<ul> <li><code>formats</code>: A list of output formats to generate (default: <code>[\"pdfa\", \"markdown\", \"epub\", \"yaml\"]</code>).</li> <li><code>preserve_original</code>: Whether to preserve the original PDF file (default: <code>true</code>).</li> <li><code>output_directory</code>: The directory to save the output files to (default: <code>./output</code>).</li> <li><code>filename_template</code>: A template for the output filenames (default: <code>{stem}_{format}.{ext}</code>).</li> </ul>"},{"location":"02-user-guide/02-output-formats/","title":"Output Formats","text":"<p>Vexy PDF Werk can generate a variety of output formats from a single PDF file.</p>"},{"location":"02-user-guide/02-output-formats/#pdfa","title":"PDF/A","text":"<p>A PDF/A file is an archivable version of your PDF. It includes a searchable text layer (thanks to OCR) and is standardized for long-term preservation.</p>"},{"location":"02-user-guide/02-output-formats/#markdown","title":"Markdown","text":"<p>VPW can convert your PDF into a series of Markdown files, one for each page. This is useful for extracting the text content of your PDF and for further processing.</p>"},{"location":"02-user-guide/02-output-formats/#epub","title":"ePub","text":"<p>An ePub file is an e-book format that can be read on a variety of devices. VPW generates an ePub file from the Markdown content.</p>"},{"location":"02-user-guide/02-output-formats/#yaml","title":"YAML","text":"<p>A YAML file containing bibliographic and processing metadata is also generated. This includes information like the number of pages, the author and title of the document, and the processing time.</p>"},{"location":"03-api-reference/00-index/","title":"API Reference","text":"<p>This section provides detailed documentation for the Vexy PDF Werk API.</p> <ul> <li>Core Components</li> <li>Integrations</li> <li>Utilities</li> </ul>"},{"location":"03-api-reference/01-core-components/","title":"Core Components","text":"<p>This section describes the core components of the Vexy PDF Werk package.</p>"},{"location":"03-api-reference/01-core-components/#pdfprocessor","title":"<code>PDFProcessor</code>","text":"<p>The <code>PDFProcessor</code> class is the main engine for PDF processing. It handles:</p> <ul> <li>Analyzing PDF structure and content.</li> <li>Applying OCR to scanned documents using <code>ocrmypdf</code>.</li> <li>Converting PDFs to the PDF/A format using <code>qpdf</code>.</li> <li>Coordinating with the <code>QDFProcessor</code> and <code>AIService</code> for advanced AI-powered structure enhancement.</li> </ul>"},{"location":"03-api-reference/01-core-components/#markdowngenerator","title":"<code>MarkdownGenerator</code>","text":"<p>The <code>MarkdownGenerator</code> class is responsible for converting PDFs to Markdown. It supports multiple backends:</p> <ul> <li><code>BasicConverter</code>: A fallback converter that uses <code>pypdf</code> for basic text extraction.</li> <li><code>MarkerConverter</code>: An optional backend that uses the <code>marker-pdf</code> library for high-fidelity conversion.</li> <li><code>MarkItDownConverter</code>: An optional backend that uses the <code>markitdown</code> library.</li> </ul>"},{"location":"03-api-reference/01-core-components/#epubcreator","title":"<code>EpubCreator</code>","text":"<p>The <code>EpubCreator</code> class generates an ePub file from the Markdown content produced by the <code>MarkdownGenerator</code>.</p>"},{"location":"03-api-reference/01-core-components/#metadataextractor","title":"<code>MetadataExtractor</code>","text":"<p>The <code>MetadataExtractor</code> class extracts comprehensive metadata from the PDF and the processing results, and saves it to a <code>metadata.yaml</code> file.</p>"},{"location":"03-api-reference/01-core-components/#qdfprocessor","title":"<code>QDFProcessor</code>","text":"<p>The <code>QDFProcessor</code> class is a new component that handles the conversion of PDF pages to and from the QDF/JSON format. This is used for the advanced AI-powered structure enhancement feature.</p>"},{"location":"03-api-reference/02-integrations/","title":"Integrations","text":"<p>This section describes the integration with external services, particularly AI services.</p>"},{"location":"03-api-reference/02-integrations/#aiservice","title":"<code>AIService</code>","text":"<p>The <code>AIService</code> class is an abstract base class that defines the interface for AI services. It has the following methods:</p> <ul> <li><code>correct_text(text: str, context: str = \"\") -&gt; str</code>: Corrects OCR errors in text.</li> <li><code>enhance_content(text: str, document_type: str = \"general\") -&gt; str</code>: Enhances content structure and formatting.</li> <li><code>enhance_pdf_structure(text_content: str) -&gt; str</code>: Enhances PDF structure and returns a diff.</li> <li><code>is_available() -&gt; bool</code>: Checks if the AI service is available.</li> </ul>"},{"location":"03-api-reference/02-integrations/#claudecliservice","title":"<code>ClaudeCLIService</code>","text":"<p>A concrete implementation of <code>AIService</code> that uses the <code>claude</code> CLI tool to interact with Anthropic's models.</p>"},{"location":"03-api-reference/02-integrations/#geminicliservice","title":"<code>GeminiCLIService</code>","text":"<p>A concrete implementation of <code>AIService</code> that uses the <code>gemini</code> CLI tool to interact with Google's models.</p>"},{"location":"03-api-reference/02-integrations/#aiservicefactory","title":"<code>AIServiceFactory</code>","text":"<p>A factory class for creating AI services based on the configuration. It also provides a method to list all available AI services.</p>"},{"location":"03-api-reference/03-utilities/","title":"Utilities","text":"<p>This section describes the utility functions used in the Vexy PDF Werk package.</p>"},{"location":"03-api-reference/03-utilities/#file_utilspy","title":"<code>file_utils.py</code>","text":"<ul> <li><code>ensure_directory(directory: Path) -&gt; Path</code>: Ensures a directory exists, creating it if necessary.</li> <li><code>safe_copy_file(src: Path, dst: Path, preserve_metadata: bool = True) -&gt; Path</code>: Safely copies a file, handling errors and ensuring the destination directory exists.</li> <li><code>generate_output_filename(input_path: Path, output_format: str, suffix: str | None = None) -&gt; str</code>: Generates a standardized output filename.</li> <li><code>cleanup_temp_files(*paths: Path) -&gt; None</code>: Cleans up temporary files and directories.</li> <li><code>find_tool_path(tool_name: str) -&gt; str | None</code>: Finds an external tool in the system's PATH.</li> </ul>"},{"location":"03-api-reference/03-utilities/#slug_utilspy","title":"<code>slug_utils.py</code>","text":"<ul> <li><code>generate_page_slug(content: str, max_length: int = 50) -&gt; str</code>: Generates a URL-friendly slug from page content.</li> <li><code>sanitize_file_slug(filename: str) -&gt; str</code>: Sanitizes a filename for safe filesystem usage.</li> </ul>"},{"location":"03-api-reference/03-utilities/#validationpy","title":"<code>validation.py</code>","text":"<ul> <li><code>validate_pdf_file(pdf_path: Path) -&gt; None</code>: Validates that a PDF file is readable and not corrupted.</li> <li><code>validate_output_directory(output_path: Path, create_if_missing: bool = True, min_free_space_mb: int = 50) -&gt; None</code>: Validates the output directory and optionally creates it.</li> <li><code>validate_formats(formats: list[str]) -&gt; list[str]</code>: Validates and normalizes the list of output formats.</li> </ul>"},{"location":"04-specification/00-introduction-and-architecture/","title":"Vexy PDF Werk (VPW) - Part 1: Planning and Architecture","text":"<p>Problem Analysis: What exactly are we solving and why?</p> <p>We're creating a comprehensive PDF processing tool that transforms \"vexing\" PDFs into multiple high-quality, accessible formats. The core problems we're solving:</p> <ol> <li>PDF/A Compliance: Many PDFs aren't archival-quality or standardized</li> <li>OCR Quality: Scanned documents often have poor or missing text layers</li> <li>Format Conversion: Need to convert PDFs to modern formats (Markdown, ePub)</li> <li>Metadata Management: Extract and standardize bibliographic information</li> <li>AI Enhancement: Use LLMs to improve OCR accuracy and content extraction</li> </ol> <p>Constraints: What limitations must we respect?</p> <ul> <li>Must use modern Python toolchain (hatch, ruff, uv, git-tag-based semver)</li> <li>Must integrate with existing robust tools (qpdf, OCRmyPDF) rather than reinventing</li> <li>Must support optional advanced features (Marker, AI services) without breaking core functionality</li> <li>Must follow anti-enterprise bloat guidelines - keep it simple</li> <li>Must work cross-platform with appropriate configuration directories</li> </ul> <p>Solution Options: What are 2-3 viable approaches with trade-offs?</p> <ol> <li>Modular Pipeline Approach (CHOSEN)</li> <li>Sequential processing stages: PDF enhancement \u2192 Markdown conversion \u2192 ePub creation \u2192 Metadata extraction</li> <li>Clean separation of concerns, easy testing, optional stages</li> <li> <p>Trade-off: More complex than monolithic, but much more maintainable</p> </li> <li> <p>Monolithic Processing</p> </li> <li>Single large function handling everything</li> <li> <p>Simple but inflexible, hard to test, no optional features</p> </li> <li> <p>Plugin Architecture</p> </li> <li>Extensible converter system</li> <li>Over-engineered for this use case, violates simplicity principles</li> </ol>"},{"location":"04-specification/00-introduction-and-architecture/#11-project-scope-one-sentence","title":"1.1. Project Scope (One Sentence)","text":"<p>VPW transforms PDF documents into PDF/A format, paginated Markdown, ePub, and bibliographic YAML through a configurable pipeline using proven external tools.</p>"},{"location":"04-specification/00-introduction-and-architecture/#12-high-level-architecture","title":"1.2. High-Level Architecture","text":""},{"location":"04-specification/00-introduction-and-architecture/#121-data-flow-pipeline","title":"1.2.1. Data Flow Pipeline","text":"<pre><code>Input PDF \u2192 PDF Analysis \u2192 OCR Enhancement \u2192 PDF/A Creation \u2192 Content Extraction \u2192 Format Generation \u2192 Output Files\n                           \u2193\n                    Optional AI Enhancement\n</code></pre>"},{"location":"04-specification/00-introduction-and-architecture/#122-core-components","title":"1.2.2. Core Components","text":"<ol> <li>PDF Processor - Handles OCR, PDF/A conversion, quality enhancement</li> <li>Content Extractors - Multiple backends for PDF-to-Markdown conversion</li> <li>Format Generators - Creates ePub and metadata outputs</li> <li>AI Integrations - Optional LLM services for enhancement</li> <li>CLI Interface - Fire-based command-line tool</li> <li>Configuration System - TOML-based settings management</li> </ol>"},{"location":"04-specification/01-technology-stack-and-configuration/","title":"Technology Stack and Configuration","text":""},{"location":"04-specification/01-technology-stack-and-configuration/#technology-stack-decisions","title":"Technology Stack Decisions","text":""},{"location":"04-specification/01-technology-stack-and-configuration/#build-and-development-tools","title":"Build and Development Tools","text":"<ul> <li>hatch + hatch-vcs: Modern Python project management with git-tag versioning</li> <li>uv: Ultra-fast package management and virtual environments, and <code>uv run</code> </li> <li>ruff: High-performance linting and formatting</li> <li>Fire: Automatic CLI generation from Python objects</li> </ul> <p>Rationale: This stack represents the current best practices in Python development, emphasizing speed, simplicity, and modern workflows.</p>"},{"location":"04-specification/01-technology-stack-and-configuration/#core-pdf-processing","title":"Core PDF Processing","text":"<ul> <li>OCRmyPDF: Battle-tested OCR and PDF/A conversion</li> <li>qpdf: Low-level PDF manipulation and optimization</li> <li>pikepdf: Python wrapper for qpdf functionality</li> </ul> <p>Rationale: These tools are industry-standard, well-maintained, and handle the complex edge cases of PDF processing.</p>"},{"location":"04-specification/01-technology-stack-and-configuration/#content-conversion-optional","title":"Content Conversion (Optional)","text":"<ul> <li>Marker: High-fidelity academic PDF conversion with deep learning</li> <li>MarkItDown: Microsoft's lightweight document converter</li> <li>Docling: IBM's advanced document understanding platform</li> </ul> <p>Rationale: Multiple backends provide flexibility - users can choose based on their needs and available resources.</p>"},{"location":"04-specification/01-technology-stack-and-configuration/#ai-integration-optional","title":"AI Integration (Optional)","text":"<ul> <li>Claude CLI: Direct command-line access to Anthropic's models</li> <li>Gemini CLI: Google's AI model access</li> <li>Custom Python integrations: Flexible API wrappers</li> </ul> <p>Rationale: CLI tools are simpler to integrate than API libraries, and optional nature ensures core functionality works without AI.</p>"},{"location":"04-specification/01-technology-stack-and-configuration/#configuration-architecture","title":"Configuration Architecture","text":""},{"location":"04-specification/01-technology-stack-and-configuration/#configuration-hierarchy","title":"Configuration Hierarchy","text":"<ol> <li>Command-line arguments (highest priority)</li> <li>Environment variables</li> <li>User config file (<code>~/.config/vexy-pdf-werk/config.toml</code>)</li> <li>Default values (lowest priority)</li> </ol>"},{"location":"04-specification/01-technology-stack-and-configuration/#configuration-categories","title":"Configuration Categories","text":"<pre><code>[processing]\nocr_language = \"eng\"\npdf_quality = \"high\"\nforce_ocr = false\n\n[conversion]\nmarkdown_backend = \"auto\"  # auto, marker, markitdown, docling, basic\npaginate_markdown = true\ninclude_images = true\n\n[ai]\nenabled = false\nprovider = \"claude\"  # claude, gemini, custom\ncorrection_enabled = false\n\n[output]\nformats = [\"pdfa\", \"markdown\", \"epub\", \"yaml\"]\npreserve_original = true\noutput_directory = \"./output\"\n</code></pre>"},{"location":"04-specification/02-integration-points-and-error-handling/","title":"Integration Points and Error Handling","text":""},{"location":"04-specification/02-integration-points-and-error-handling/#integration-points","title":"Integration Points","text":""},{"location":"04-specification/02-integration-points-and-error-handling/#external-tool-dependencies","title":"External Tool Dependencies","text":"<ul> <li>System Requirements: tesseract-ocr, qpdf, ghostscript</li> <li>Optional Requirements: pandoc (for ePub), marker/markitdown/docling</li> <li>AI Services: API keys for Claude/Gemini if using AI features</li> </ul>"},{"location":"04-specification/02-integration-points-and-error-handling/#file-system-interactions","title":"File System Interactions","text":"<ul> <li>Input: Single PDF files or batch processing</li> <li>Temporary: Isolated working directories for each job</li> <li>Output: Organized directory structure with consistent naming</li> <li>Config: Platform-appropriate configuration directories</li> </ul>"},{"location":"04-specification/02-integration-points-and-error-handling/#error-handling-philosophy","title":"Error Handling Philosophy","text":""},{"location":"04-specification/02-integration-points-and-error-handling/#graceful-degradation","title":"Graceful Degradation","text":"<ul> <li>Core PDF/A conversion must always work</li> <li>Optional features fail gracefully with clear messages</li> <li>Fallback mechanisms for conversion backends</li> <li>Clear error messages with suggested solutions</li> </ul>"},{"location":"04-specification/02-integration-points-and-error-handling/#recovery-strategies","title":"Recovery Strategies","text":"<ul> <li>Retry mechanisms for network-dependent operations</li> <li>Temporary file cleanup on failures</li> <li>Validation checkpoints throughout pipeline</li> <li>Detailed logging for debugging</li> </ul>"},{"location":"04-specification/03-security-performance-and-quality/","title":"Security, Performance, and Quality","text":""},{"location":"04-specification/03-security-performance-and-quality/#security-considerations","title":"Security Considerations","text":""},{"location":"04-specification/03-security-performance-and-quality/#input-validation","title":"Input Validation","text":"<ul> <li>PDF structure validation before processing</li> <li>Path traversal prevention</li> <li>File size and type restrictions</li> <li>Malformed PDF handling</li> </ul>"},{"location":"04-specification/03-security-performance-and-quality/#api-key-management","title":"API Key Management","text":"<ul> <li>Environment variables for sensitive data</li> <li>No hardcoded credentials</li> <li>Optional secure config file storage</li> <li>Clear separation of public/private settings</li> </ul>"},{"location":"04-specification/03-security-performance-and-quality/#performance-and-resource-management","title":"Performance and Resource Management","text":""},{"location":"04-specification/03-security-performance-and-quality/#processing-efficiency","title":"Processing Efficiency","text":"<ul> <li>Parallel Processing: Multi-core utilization where possible</li> <li>Memory Management: Streaming for large files, cleanup of temp files</li> <li>Caching: Basic caching of heavy operations (model loading)</li> <li>Progress Reporting: User feedback for long-running operations</li> </ul>"},{"location":"04-specification/03-security-performance-and-quality/#scalability-considerations","title":"Scalability Considerations","text":"<ul> <li>Batch Processing: Handle multiple PDFs efficiently</li> <li>Resource Limits: Configurable memory and CPU usage</li> <li>Async Operations: Non-blocking network calls for AI services</li> <li>Interrupt Handling: Clean shutdown and cleanup</li> </ul>"},{"location":"04-specification/03-security-performance-and-quality/#quality-assurance-strategy","title":"Quality Assurance Strategy","text":""},{"location":"04-specification/03-security-performance-and-quality/#code-quality","title":"Code Quality","text":"<ul> <li>Type Hints: Full type annotation for maintainability</li> <li>Documentation: Comprehensive docstrings and README</li> <li>Testing: Unit tests for core functions, integration tests for pipeline</li> <li>Formatting: Automated code formatting with ruff</li> </ul>"},{"location":"04-specification/04-extensibility-and-success-criteria/","title":"Extensibility and Success Criteria","text":""},{"location":"04-specification/04-extensibility-and-success-criteria/#future-extensibility","title":"Future Extensibility","text":""},{"location":"04-specification/04-extensibility-and-success-criteria/#plugin-architecture-preparation","title":"Plugin Architecture Preparation","text":"<ul> <li>Clean interfaces between components</li> <li>Configurable backend selection</li> <li>Easy addition of new conversion engines</li> <li>Minimal coupling between optional features</li> </ul>"},{"location":"04-specification/04-extensibility-and-success-criteria/#enhancement-opportunities","title":"Enhancement Opportunities","text":"<ul> <li>Web interface for non-technical users</li> <li>Database backend for document management</li> <li>Integration with reference managers</li> <li>Advanced document analysis features</li> </ul>"},{"location":"04-specification/04-extensibility-and-success-criteria/#success-criteria","title":"Success Criteria","text":""},{"location":"04-specification/04-extensibility-and-success-criteria/#functional-requirements","title":"Functional Requirements","text":"<ol> <li>PDF/A Conversion: Reliably converts any valid PDF to PDF/A format</li> <li>OCR Enhancement: Adds searchable text layers to scanned documents</li> <li>Format Generation: Produces quality Markdown, ePub, and metadata files</li> <li>AI Integration: Optional LLM enhancement works when configured</li> <li>Cross-Platform: Runs on Linux, macOS, and Windows</li> </ol>"},{"location":"04-specification/04-extensibility-and-success-criteria/#quality-requirements","title":"Quality Requirements","text":"<ol> <li>Reliability: Handles malformed PDFs gracefully</li> <li>Performance: Processes typical documents in reasonable time</li> <li>Usability: Clear CLI with helpful error messages</li> <li>Maintainability: Clean, documented, testable code</li> <li>Extensibility: Easy to add new features and backends</li> </ol>"},{"location":"04-specification/04-extensibility-and-success-criteria/#deployment-requirements","title":"Deployment Requirements","text":"<ol> <li>Easy Installation: Single command installation via pip</li> <li>Clear Dependencies: Well-documented system requirements</li> <li>Configuration: Simple setup for optional features</li> <li>Documentation: Comprehensive user and developer guides</li> <li>Versioning: Semantic versioning with git tags</li> </ol>"},{"location":"05-development/00-contributing/","title":"Contributing","text":"<p>Contributions are welcome! Please follow these steps:</p> <ol> <li>Fork the repository.</li> <li>Create a feature branch (<code>git checkout -b feature/amazing-feature</code>).</li> <li>Make your changes, following the code quality standards.</li> <li>Run tests and linting to ensure everything is working correctly.</li> <li>Commit your changes (<code>git commit -m 'Add amazing feature'</code>).</li> <li>Push to the branch (<code>git push origin feature/amazing-feature</code>).</li> <li>Open a Pull Request.</li> </ol>"},{"location":"05-development/01-testing/","title":"Testing","text":"<p>This project uses <code>pytest</code> for testing. To run the tests, use the following command:</p> <pre><code>hatch run test\n</code></pre> <p>This will run all the unit and integration tests.</p>"},{"location":"05-development/01-testing/#test-structure","title":"Test Structure","text":"<p>The tests are organized into two main directories:</p> <ul> <li><code>tests/unit</code>: Unit tests for individual components.</li> <li><code>tests/integration</code>: Integration tests for the complete pipeline and CLI.</li> </ul>"},{"location":"05-development/01-testing/#running-specific-tests","title":"Running Specific Tests","text":"<p>You can run specific tests by passing arguments to <code>pytest</code>:</p> <pre><code>hatch run test -- tests/unit/test_config.py\n</code></pre>"},{"location":"05-development/01-testing/#coverage","title":"Coverage","text":"<p>To generate a test coverage report, run:</p> <pre><code>hatch run test-cov\n</code></pre>"},{"location":"05-development/02-release-process/","title":"Release Process","text":"<p>This project uses a script to automate the release process. To create a new release, run the following command:</p> <pre><code>./scripts/release.sh &lt;version&gt;\n</code></pre> <p>For example:</p> <pre><code>./scripts/release.sh 1.2.0\n</code></pre> <p>This script will:</p> <ol> <li>Run all quality checks and tests.</li> <li>Build the package.</li> <li>Create a git tag for the new version.</li> <li>Push the changes and tag to the remote repository.</li> <li>Publish the package to Test PyPI and then to PyPI.</li> <li>Create a new release on GitHub.</li> </ol>"}]}